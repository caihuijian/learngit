Java 数据类型

本系列以 http://www.runoob.com/java/java-basic-syntax.html 为纲要，个人理解和整理，如有错误请指出，谢谢。
（略过了java历史和环境配置）

关键字
内存分配
基本数据类型
引用数据类型
常量
转义字符

Java的内存分配：
1 用来装代码的，就是编译的东西。（寄存器）
2 用来装静态变量的，例如用static关键字的变量，例如字符串常量。（常量池）
3 stack，也就是栈，是用来装变量和引用类型的！但区别在于，装了变量以后，变量上是有值的，而引用类型本身在stack上是没有值的。
4 heap，也就是堆！堆可以一句话概括，装new出来的东西！
综上，基本数据类型都在stack中，而引用类型，变量是放在stack中，真正有内容的东西放在heap中，也就是当new了一个新的引用类型，他就会放在堆中，同时栈中的引用类型变量会指向堆中new出来的东西。
更详细的Java内存分配参见：http://blog.csdn.net/shimiso/article/details/8595564

Java数据类型分为两大类：基本数据类型和引用数据类型
1 概念上
-基本数据类型:变量名指向具体的数值
-引用数据类型:变量名指向存数据对象的内存地址,即变量名指向hash值
2 内存构建
-基本数据类型:变量在声明之后java就会立刻分配给他内存空间
-引用数据类型:它以特殊的方式(类似C指针)指向对象实体（具体的值），这类变量声明时不会分配内存，只是存储了一个内存地址。
3 使用方面
-基本数据类型:使用时需要赋具体值,判断时使用“==”号
-引用数据类型:使用时可以赋null,判断时使用equals方法

Java语言提供了八种基本类型：六种数字类型（四个整数型byte short int long，两个浮点型double float），一种字符类型char，还有一种布尔型boolean。
引用数据类型：类（class） 接口（interface） 数组（array）

关于引用类型
在Java中，引用类型的变量非常类似于C/C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如Employee、Pubby等。变量一旦声明后，类型就不能被改变了。
对象、数组都是引用数据类型。
所有引用类型的默认值都是null。
一个引用变量可以用来引用与任何与之兼容的类型。
例子：Site site = new Site("Runoob")。

Java常量
常量在程序运行时，不会被修改的量。
在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似：
final double PI = 3.1415927;
虽然常量名也可以用小写，但为了便于识别，通常使用大写字母表示常量。
byte、int、long、和short都可以用十进制、16进制以及8进制的方式来表示。
当使用常量的时候，前缀0表示8进制，而前缀0x代表16进制。例如：
int decimal = 100;
int octal = 0144;
int hexa =  0x64;
字符串常量和字符常量都可以包含任何Unicode字符。例如：
char a = '\u0001';
String a = "\u0001";

Java语言支持一些特殊的转义字符序列。
转义:使用转义字符 ‘\’ 来将其后的字符转变为其它的含义
符号	字符含义
\n	换行 (0x0a)
\r	回车 (0x0d)
\f	换页符(0x0c)
\b	退格 (0x08)
\s	空格 (0x20)
\t	制表符
\"	双引号
\'	单引号
\\	反斜杠
\ddd	八进制字符 (ddd)
\uxxxx	16进制Unicode字符 (xxxx)
